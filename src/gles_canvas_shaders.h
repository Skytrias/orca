/*********************************************************************
*
*	file: gles_canvas_shaders.h
*	note: string literals auto-generated by embed_text.py
*	date: 31/012023
*
**********************************************************************/
#ifndef __GLES_CANVAS_SHADERS_H__
#define __GLES_CANVAS_SHADERS_H__


//NOTE: string imported from src\gles_canvas_shaders\gles_canvas_fragment.glsl
const char* gles_canvas_fragment = 
"#version 310 es\n"
"\n"
"precision mediump float;\n"
"layout(std430) buffer;\n"
"\n"
"struct vertex {\n"
"	vec2 pos;\n"
"	vec4 cubic;\n"
"	vec2 uv;\n"
"	vec4 color;\n"
"	vec4 clip;\n"
"	int zIndex;\n"
"};\n"
"\n"
"layout(binding = 0) buffer vertexBufferSSBO {\n"
"	vertex elements[];\n"
"} vertexBuffer ;\n"
"\n"
"layout(binding = 1) buffer indexBufferSSBO {\n"
"	vec2 elements[];\n"
"} indexBuffer ;\n"
"\n"
"layout(location = 0) uniform int indexCount;\n"
"layout(location = 0) out vec4 fragColor;\n"
"\n"
"void main()\n"
"{\n"
"    fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n"
"}\n";

//NOTE: string imported from src\gles_canvas_shaders\gles_canvas_vertex.glsl
const char* gles_canvas_vertex = 
"#version 310 es\n"
"\n"
"precision mediump float;\n"
"\n"
"void main()\n"
"{\n"
"    float x = float(((uint(gl_VertexID) + 2u) / 3u)%2u);\n"
"    float y = float(((uint(gl_VertexID) + 1u) / 3u)%2u);\n"
"\n"
"    gl_Position = vec4(-1.0f + x*2.0f, -1.0f+y*2.0f, 0.0f, 1.0f);\n"
"}\n";

#endif // __GLES_CANVAS_SHADERS_H__
